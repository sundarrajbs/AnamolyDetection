# User Behavior Anomaly Detection

This repository contains a Python-based anomaly detection project that identifies unusual user behavior patterns using the Isolation Forest algorithm. It includes two main scripts: one for generating a synthetic dataset and another for detecting anomalies in user login data.

## Project Overview

The project demonstrates anomaly detection in user behavior data, focusing on features like login frequency, session duration, and login hour. It uses the `IsolationForest` algorithm from scikit-learn to flag outliers, which could represent suspicious activities (e.g., excessive logins or unusual login times). The dataset is provided via a CSV file, and a generator script creates a large synthetic dataset for testing.

### Files
- **`anomaly_detection_csv.py`**: Main script that reads user behavior data from a CSV file, applies the Isolation Forest model, and visualizes anomalies in a scatter plot.
- **`generate_user_behavior_csv.py`**: Generates a large synthetic dataset (`user_behavior_large.csv`) with 10,000 samples (9,500 normal, 500 anomalous).
- **`user_behavior_large.csv`**: Sample CSV file with user behavior data (generated by the above script).

## Prerequisites

- **Python 3.6+**
- **Required Libraries**:
  - `numpy`: For numerical operations and data generation.
  - `pandas`: For CSV handling and data manipulation.
  - `scikit-learn`: For the Isolation Forest algorithm.
  - `matplotlib`: For visualizing results.
- Install dependencies using:
  ```bash
  pip install numpy pandas scikit-learn matplotlib
  ```

## Setup and Installation

1. **Clone the Repository**:
   ```bash
   git clone <repository-url>
   cd <repository-name>
   ```

2. **Install Dependencies**:
   Ensure Python is installed, then run:
   ```bash
   pip install -r requirements.txt
   ```
   Alternatively, install the libraries listed above.

3. **Generate the Dataset** (optional):
   If you don't have a custom `user_behavior_large.csv`, generate one:
   ```bash
   python generate_user_behavior_csv.py
   ```
   This creates `user_behavior_large.csv` with 10,000 samples (5% anomalies).

## Usage

1. **Prepare the CSV File**:
   - Ensure `user_behavior_large.csv` exists in the project directory or create your own CSV with columns:
     - `login_frequency`: Number of logins per day (float).
     - `session_duration`: Session length in minutes (float).
     - `login_hour`: Hour of login (0-23, float).
   - Example CSV content:
     ```csv
     login_frequency,session_duration,login_hour
     5.2,30.5,14.1
     4.8,28.7,13.9
     20.0,100.0,2.3
     ```

2. **Run the Anomaly Detection Script**:
   ```bash
   python anomaly_detection_csv.py
   ```
   - **Output**:
     - A scatter plot showing normal points (blue) and anomalies (red).
     - A terminal summary, e.g.:
       ```
       Detected 500 anomalies out of 10000 samples.
       Sample anomalies:
          login_frequency  session_duration  login_hour  anomaly
       9500           18.2           115.6        3.1       -1
       ...
       ```

## Dataset Details

- **Generated Dataset** (`user_behavior_large.csv`):
  - **Size**: 10,000 rows (9,500 normal, 500 anomalous).
  - **Normal Data**: 
    - `login_frequency`: ~5 logins/day (std=1.5).
    - `session_duration`: ~30 minutes (std=5).
    - `login_hour`: ~14 (2 PM, std=2).
  - **Anomalous Data**:
    - Uniformly distributed: `login_frequency` (0-20), `session_duration` (5-120), `login_hour` (0-23).
  - Generated using `numpy` with a fixed seed for reproducibility.

- **Custom Datasets**:
  - Modify `generate_user_behavior_csv.py` to adjust sample sizes or distributions.
  - Use your own CSV with the same column structure for testing.

## How It Works

- **Algorithm**: `IsolationForest` isolates data points by building random decision trees. Anomalies are identified by shorter path lengths (easier to isolate).
- **Parameters**:
  - `contamination=0.05`: Assumes 5% of data are anomalies.
  - `random_state=42`: Ensures reproducible results.
- **Visualization**: A scatter plot shows `login_frequency` vs. `session_duration`, with anomalies in red and normal points in blue.

## Running in VS Code

1. Open the project folder in VS Code.
2. Select your Python interpreter (`Ctrl+Shift+P`, then `Python: Select Interpreter`).
3. Run `generate_user_behavior_csv.py` to create the CSV (if needed).
4. Run `anomaly_detection_csv.py` using the "Run Python File" button or terminal.
5. Check the plot and terminal output for results.

## Troubleshooting

- **FileNotFoundError**: Ensure `user_behavior_large.csv` is in the project directory.
- **ModuleNotFoundError**: Verify all required libraries are installed.
- **Plot Issues**: Ensure `matplotlib` is installed and your system supports graphical output.

## Contributing

Feel free to fork the repository, make improvements, and submit pull requests. Suggestions for additional features (e.g., new algorithms or data visualizations) are welcome!
